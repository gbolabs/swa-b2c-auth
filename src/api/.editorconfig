root = true # Apply settings to the root directory

[*]
indent_style = tab# Use spaces instead of tabs for indentation
insert_final_newline = false # Insert a newline at the end of the file
indent_size = 4# Set indentation size to 4 spaces
trim_trailing_whitespace = true # Remove trailing whitespace
charset = utf-8 # Set the character set to UTF-8 with BOM
end_of_line = crlf# Set the end of line to CRLF
[*.cs]
# Generals rules
dotnet_analyzer_diagnostic.category-Design.severity = error
dotnet_analyzer_diagnostic.category-Documentations.severity = suggestion
dotnet_analyzer_diagnostic.category-Globalization.severity = warning
dotnet_analyzer_diagnostic.category-Interoperability.severity = warning
dotnet_analyzer_diagnostic.category-Maintainability.severity = warning
dotnet_analyzer_diagnostic.category-Naming.severity = warning
dotnet_analyzer_diagnostic.category-Performance.severity = warning
dotnet_analyzer_diagnostic.category-Reliability.severity = error
dotnet_analyzer_diagnostic.category-SingleFile.severity = warning
dotnet_analyzer_diagnostic.category-Security.severity = error
dotnet_analyzer_diagnostic.category-Style.severity = warning
dotnet_analyzer_diagnostic.category-Usage.severity = error
dotnet_analyzer_diagnostic.category-CodeQuality.severity = warning
dotnet_analyzer_diagnostic.category-Compatibility.severity = warning

dotnet_diagnostic.CA1014.severity = none # Mark assemblies with CLSCompliant

# Exceptions
dotnet_diagnostic.CA1031.severity = warning # Do not catch general exception types
dotnet_diagnostic.CA1032.severity = warning # Implement standard exception constructors
dotnet_diagnostic.CA1062.severity = warning # Validate arguments of public methods
dotnet_diagnostic.CA1063.severity = warning # Implement IDisposable Correctly
dotnet_diagnostic.CA1064.severity = warning # Exceptions should be public
dotnet_diagnostic.CA1065.severity = error # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA2153.severity = warning # Do not catch CorruptedStateExceptions
dotnet_diagnostic.CA2200.severity = warning # Rethrow to preserve stack details
dotnet_diagnostic.CA2201.severity = warning # Do not raise reserved exception types
dotnet_diagnostic.CA2208.severity = warning # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2219.severity = warning # Do not raise exceptions in finally clauses

# enforce the use of the 'var' keyword
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:suggestion

# bodied expression
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_constructors = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion

# pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning
csharp_style_prefer_pattern_matching = true:warning

# await
csharp_style_await_foreach = true:warning # Requires C# 8.0, e.g. await foreach (var x in y) { }
csharp_style_await_using = true:warning # Requires C# 8.0, e.g. await using (var x = new MemoryStream()) { }
csharp_style_prefer_index_operator = true:warning # Requires C# 8.0, e.g. x[1];
csharp_style_prefer_range_operator = true:warning # Requires C# 8.0, e.g. x[1..2];
csharp_style_prefer_is_null_check_over_reference_equality_method = true:warning # Requires C# 8.0, e.g. x is null;
csharp_style_prefer_conditional_expression_over_assignment = true:suggestion # Requires C# 8.0, e.g. x = y == null ? z : y;
csharp_style_prefer_conditional_expression_over_return = true:suggestion # Requires C# 8.0, e.g. return x == null ? y : x;
dotnet_style_coalesce_expression = true:warning # e.g. var x = y ?? z;
dotnet_style_collection_initializer = true:warning # e.g. var x = new List { 1, 2, 3 };
dotnet_style_explicit_tuple_names = true:warning # e.g. var x = (a: 1, b: 2);
dotnet_style_null_propagation = true:warning # e.g. var x = y?.z;
dotnet_style_object_initializer = true:warning # e.g. var x = new Person { Name = "Bill" };
dotnet_style_predefined_type_for_locals_parameters_members = true:warning # e.g. int x = 0;
dotnet_style_prefer_auto_properties = true:warning # e.g. public string Name { get; set; }
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning # e.g. var x = new { Name = "Bill" };

# Exclusions
# IDE0058: Expression value is never used
csharp_style_unused_value_expression_statement_preference = discard_variable # e.g. _ = x;
dotnet_diagnostic.IDE0058.severity = suggestion # e.g. _ = x;
csharp_using_directive_placement = outside_namespace:suggestion  # e.g. using System;
csharp_prefer_simple_using_statement = true:suggestion # e.g. using var x = new MemoryStream();
csharp_prefer_braces = true:suggestion # e.g. if (x) { }
csharp_style_namespace_declarations = block_scoped:silent # e.g. namespace Foo { }
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:suggestion # Requires C# 9.0, e.g. Console.WriteLine("Hello, World!");
csharp_style_expression_bodied_local_functions = true:suggestion # Requires C# 7.0, e.g. int Add(int x, int y) => x + y; 
csharp_indent_labels = one_less_than_current 
csharp_space_around_binary_operators = before_and_after 
# Inform about IDE0046: Convert to conditional expression
dotnet_diagnostic.IDE0046.severity = suggestion 

# IDE0090: Use 'new(...)'
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion # e.g. var x = new X();

# CA1727: Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = none

[Program.cs]
dotnet_diagnostic.CA1812.severity = none # Program.Main is not called by the runtime and is the entry point for the application. https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1812
[*{_AssemblyInfo.cs,.notsupported.cs,AsmOffsets.cs}]
generated_code = true

[*.{cs,vb}]
#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Naming styles

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
dotnet_style_prefer_simplified_interpolation = true:suggestion
